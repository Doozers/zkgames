{
  "name": "zkPetitsChevaux",
  "functions": [
    {
      "name": "_constructor",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "dicesAddress",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_play",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "seedHash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "move",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_register",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "user",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "seedHash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "_",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "_",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "_",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "_",
          "type": {
            "kind": "array",
            "length": 0,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+2UYQ7CIAyFCzi2zsQ7eANMPMDufyph0uRZ9ZfPH8vWpGFroXx9AUYRCfK0VP0k72b5pY/lN7sFXq3yT864Ec5E5AwfOAOcizYO1XP1sfq1x7XH7RxZzNZFiCVXXyFvluF7IfWW+dqXofMLjNjvBbQi7ntXpxHq6XUT2L+tmbgsq65KrtlqzMBvvRr7GfIKc2Yux/pWTfKqqf0j38G6b1aFWIZYdMztHvp7SgP1db892mYPr80/z/0HAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "dicesAddress",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+2dB5QbRRKGS9Ku1jZ4DVywDQZsE2yDwaOR1jsiLDZeDJhwJpoMWgVjvF7HJefMRS5zcIHjcuYylzkuZy7nO47LOWcw9I9roLXW+o2eqvXUr7bfq1eyXNvqr8PMP9JMdW+KaJqxuMQvl7APWiu5blNHd4N688HiQqHaH1Zz+VwpCItDUV9Q6BtaHOWiXF/UVwmjfL4aFaL+4lCxPyjmCvlqrtZXzNe44m65NgYuuLOmjqwD7myHc/eYOnoccPcIc48331tt5wzBdqa4L2dzfdONbTU2Q6lfaGwmjxn6ZRful5kd0K7drXbNnhivJ/tljwbjtUcHtGuWsQw9tf5T1muy3kNZwj5oreSmk+yxIS57GpvCrycbS4/hyFqvlwixZOX754lzetbiiEvM02tskrGp/O8NpfLapZtWj66rjmzZbHdIZswApqxKUtYHdI2Jtzsv/j/7ZCbei9SAUqruWSR3VttTrl1Bxupwu0ivtjS5UQxScyDKFcNKKdyhGglaK3VzIGix2IspXoF7Gdubtp3x5hiba2wfY/sa28/Y/sbmGZtvbIGxA4xN47+1F2Daem/s4m3TES1wdUSbZHHQGN5eZsnKfm4Fn9VN9WXsQWxJg/5EW2fy6+rIxtHqaHXl6NDwmvLy0ZHyljXrR5aVhoftiRB/SDwhMg0gx77fZXVID7/utt6L/67H8s6OwBnafnYRya/E2dTZRyMuod0XB7JfaA2QfSrFQD7WoM9sLZXmmPQOYlLj1DPeinE2GWI4gD86pjFSn7GQO1T6wnMhuZlgGWH+2QLM1dq2cqAH/Sct6ySZD7LqykX5MOzPIy6qBLlCpRxGYVgZKgTloFQOq8VCrlgrhIV8uVIeMnWWcrWgVioXa9G2dtkXU3aRXj8HkbykQTmYtpcjZM1/B/KgTv436j+nBztXg3Owg3oXkdykd8W9SH6MGrZV4kC3yEG9AckuTCzCgH27VNoccnMSEJ4XdSotPoqEpEylAdyVSgu5Q6UXSUhuJpi0SpsjwByrtJwH/Set0iSZ8+SfSsuT7MkgLgWaUGkig1NwUG8fdbZKA3ef/Bg5UWkht1W63sUkuzCxCBdTe1XaXHJzEhCeF3UqrZ99RMpUGsBdqbSIO1R6kUTkZoJJq7S5AsyxSuv3oP+kVZokc5H8U2lFkj0ZxOUQmlBpIoNziIN6D6XOVmngPlR+jJyotIjbKl3vYSS7MLEID6P2qrR55OYkIDwv6lTa4ewHSJlKA7grlTbAHSq9SAbIzQSTVmnzBJhjlXa4B/0nrdIkmY8g/1TaESR7MiCrfRMqrcU648GRrncpdbZKA/dS+TFyotIGuK3S9R5JsgsTi/BIaq9Km09uTgLC86JOpS1jP0jKVBrAXam0Qe5Q6UUySG4mmLRKmy/AHKu0ZR70n7RKk2Q+ivxTaUeR7MkgLstpQqWJDM5yB/UeTZ2t0sB9tPwYOVFpg9xW6XqPIdmFiUV4DLVXpS0gNycB4XlRp9KOZb+ClKk0gLtSaSu4Q6UXyQpyM8GkVdoCAeZYpR3rQf9JqzRJ5uPIP5V2HMmeDOJyPE2oNJHBOd5BvSdQZ6s0cJ8gP0ZOVNoKbqt0vSeS7MLEIjyRtldn0gfUtGAf7EVuTiLSY7W3QDsbPf0uPTaSGRAOaNPYBK2V3IAn7Rz0pJ3tEnatzs+0IPM+Cpn3JT+Ovc8iuWMv2obkCrFwRd1xfiT4kH3EHjmGVjJTnOctHtetlt+P/f604zxMuxo7yaovFsvjxeOK/uQm409pMv7UJuNPazL+9CbjVzUZf0aT8Wc2GX9Wk/FnNxl/TpPx5zYZf16T8ec3GX9Bk/ElKz49TjyysgwljCsnjKskjKsmjKsljFudMO7ChHFrEsZdlDBubcK44YRx6xLGjSSMW58wbkPCuI1W3CqOO4n/fxYly6d3MvtT2J/K/jT2p7Nfxf4M9meyP4v92ezPYX8u+/PYn8/+AvYl9kPsy+wr7Kvsa+xXs7+Q/Rr2F7Ffy36Y/Tr2I+zXs9/AfmPC/pnw7fFIjbKJtj/+xrpkJftN7Hcztpnqi/Q1aIrktN8Wao8uD1orot+JjHrCnBFkvtgT5i5B5ks8Ye4WZL7UE+asIPNlnjD3CDJf7gnz7oLMV3jCPEOQ+UqFzFcpZL5aIfM1CpmvVch8nULm6xUy36CQ+UaFzDcpZL5ZIfMtCplvVch8m0LmZytkfo5C5ucqZH6eQubnK2R+gULm2xUyv1Ah84sUMr9YIfNLFDK/VCHzyxQyv1wh8x0KmV+hkPlOhcx3KWR+pULmVylkfrVC5tcoZL5bIfNrFTLfo5D5dQqZX6+Q+Q0Kmd+okPlNCpnfrJD5LQqZ36qQ+W0Kmd+ukPkdCpnfqZD5XQqZ71XI/G6FzO9RyPxehczvU8j8foXMH1DI/EGFzPcpZP6QQuYPK2T+iELmjypk/phC5o8rZP6EQub7FTJ/UiHzAwqZP6WQ+dMKmT+jkPmzCpk/p5D58wqZv6CQ+YsKmb+kkPnLCpm/opD5qwqZv6aQ+UGFzF9XyPwNhczfVMj8LYXM31bI/B2FzN9VyPw9hczfV8j8A4XMP1TI/COFzD9WyPwThcw/Vcj8kELmnylkflgh888VMv9CIfMvFTL/SiHzrxUy/0Yh828VMv9OIfPvFTL/QSHzHxUy/0kh858VMv9FIfNfFTL/TSHz3z1h3izI/A+F4/xPhcz/Usj8b4XM/1HI/F+FzP9TyPx/hcyPKGR+VCHzVoXMj3nCPEmQmVJ+ME8WZE55wjxFkDntCfNOgswZT5h3FmTu8oR5qiBztyfMvYLMWU+Ypwky93jCvIsg8yRPmHcVZJ7sCfNugsxTPGF+miDzTp4wP12QeWdPmJ8hyDzVE+ZnCjL3CjJP53pSzJwx1mWs21jWWI8xXBPiGgnXDNDQ0JTQWNAcOAfjnIRjNI5ZWMOY0xhjME+3+vQu9luMjRq72Nglxi41dpmxy41dYexKY1cZu9rYNcauNXadseuN3WDsRmM3GbvZ2C3GbjV2mzHsc49937EPOvYFxz7Z2Df6dmPYVxj77GLfWezDin1JsU8n9q28wxj2NbyT24h94LAvGvYJw75ZdxvDvkr3GMO+O9iHBvuyYJ8S7NuBfSywrwP2OUDef+TBR1545ElH3vB7jSGvNPIsI+8w8vAiLy3ytCJv6X3GkNcSeR6R9xB5AJEXD3nikDftfmPIq/WAMeRdQh4i5OVBnhrkbUEeE+T1QJ4L5H1AHgTkBcBz8nhu/EFjeK4Yz9niuVM8h4nnEvGcHp5bw3NceK4Jz/nguRc8B4LnIvCcAO6bf8gY7qt+2Bjuu8V9qLgvE/cp4r493MeG+7pwnxPu+8F9MLgvBPdJ4L4B/I6O35XxOyt+d8TvcPhdCr/T4HcLfI+P77XxPS++98T3gPheDN8T4XsTTE5cV+M6E9dduA6BLodOhW6DjsF5Hec5HPdxHMRxAeskLo8DnPUOXqjvAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "debug",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VTWw7CIBBcyks08d9PbwA36Bm8QRMbP03U+8cS2XRciT+FTZrdAp0ZZreKiBR9QtMaStTnUjtYH0uOG8MBXytMu2DYghVA81DysdxlaMqb0qHioQNv2/DEhP1BXAKuQN995DUtvAhQ81727gT7pvINnzWVc3h32+HuyDPCO3PtQYMBLa6tlpgxPK2hgYt1sCYPPnmhF3vgIfeYnR49wd5z/JtR5t8tD/8zz9f9Md3myzxdFUDIkRoABmsce7YfR5PP8p6nX4nN/JC4SuQcbzFqEy58BQAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "dices",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VTWwrCMBDcvI2C/356g3qDnsEbFCx+Cur9scEMHWPwx2Sh7DZJZyazWyUiSt5hZA1V1Mdce1ofcx7+DE98rTDdguEyViTNOud9votuy3vaVTz05G0rHu4P4wpxRfnsI9ZM4UWkGnvJuwPt28o3OGsr5/jursPdmWekd3BtSYMlLb6tliFhBFnDEBd0QFMgn0Khl3sQKPeYnR494d4jfs0o+DfLg3/m8bzdp+t8nqeLIohypDTBcM1jD/t5NHEWe0G+JTbzo8RVRU7xAo43T8Z8BQAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "horses",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VUXQrCMAxOs7ZzCj766BlUdoCewRsMHD4K6v1xwwQ/Y31aGxjJ8v99LfVE5OgtDX3EgfZgs+TNvr34I9Ql0YeFEmGHUj3D1CNIrw52ZtFbwcJl5542GV4j8F1oztHRtySwG8Bt8zqIM/jY1M7c7SDuMzWa6zN5iD1UwI5zEvzrrDXsgPsFgxOxa6ylKmfWV+CiR87JcE9mFmJcTZ/e1cfzdh+u43kcLrmnwB69tZHKaGqQXo219Ltisbth+/57z1ReAJR7+hQFAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "last_timestamp",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VTWwrCMBDcvI2C/356g/QGPYM3KFj8FNT7Y4NZOq7BnyYLZbdJOjOZ3SoiUvQJQ2soUZ9L7WF9LDltDA98rTDdguEKVgTNuuRjuYtuyjukQ8VDD9624UkD9gdxCbgiffeR14zwIkLNe9m7E+zbyjd81lbO4d1dh7sjzwjvzLUHDRa0+LZaUsYItIYBLtbBmgL4FIRe7EGA3GN2evQEe8/xb0aZf7c8/M88X/fHdJsv83RVACFHSgMM1jj2bD+OJp/lvUC/Epv5IXGVyDneduaaynwFAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "play",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "dicesAddress",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "seed",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 96
          },
          "visibility": "private"
        },
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "move",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "players",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VUzQrCMAxOs7ZzCh49+gwKw3OfwTcYODwK6vvjhgl+xnpaGxjJ8v99LfVE5OgtDX3EgfZgs+TNvr34I9Ql0YeFEmGHUj3D1CNIrw52ZtFbwcJl5542GV4j8F1oztHRtySwG8Bt8zqIM/jY1M7c7SDuMzWa6zN5iD1UwI5zEvzrrDXsgPsFgxOxa6ylKmfWV+CiR87JcE9mFmJcTZ/e1cfzdh+u43kcLrmnwB69tZHKaGqQXo219Ltisbth+/57z1Rec9SjVxQFAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "register",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "dicesAddress",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "seed",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 96
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "round",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VTWw7CIBBcyks08d9Pb1Bv0DN4gyZWP03U+8cSmXRE4k9hk2a3QGeG2a0SESWf0LKEyupjqh2tDyn3K8MRXy1MO2PYhBVIc5fyPt2lq8t73RU8dORtJZ4T94dxhbiCfPcRazrzIlCNvejdgfZN4RucNYVzfHfb4O7MM9A7uLakwZAWV1dLHzG8LKGJCzqgyZNPPtPLPfCUW8xOi55w7xH/ZhT8m/nBP/N83R/jbTpP40URRD5SHcFwzWMP+3k0cRZ7Xn4lVvMjx1VZjvEGw72gpnwFAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "seedHashes",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VUXQrCMAxOs7ZzCj766BkUdoCewRsUHD4K6v1xwwQ/Y32yDYxk+f++lnoicvSSjt7iQHuwWfIW3178EeqS6MOfEmGHWj3D3CNIrwF2ZtFbwcJ15+ZNgdcIfFeac3T0KQnsDnDbvAHiDD42tQt3O4j7Qo3m+kIeYg8NsOOcBP86aw074H7B4ETsGuupyZmNDbgYkXMy3JOZhRhX86d39f643vJlOk35XHoK7NFbG6mMpgbp1VhP3ytWuxu276/3TOUJBM7l9hQFAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "winner",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VTWw7CIBBcyks08d9Pb1Bv0DN4gyYSP03U+8cSmXRE4o+wSbNboDPD7FaJiJJ3aFlDFfUx147Wp5zHP8MRXytMu2DYjBVI85DzPt9laMsbdxUPHXnbiOfE/WFcIa4gn33Emi68CFRjL3l3oH1T+QZnTeUc3912uDvzTPQOri1pMKTFtdUyJgwva2jigg5o8uSTL/RyDzzlHrPToyfce8SvGQX/Znnwzzyet/t8jec4XxRBlCM1EAzXPPawn0cTZ7Hn5VtiMz9KXFXkFC9LL0tQfAUAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "",
      "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YlO1vR2bYyLtnZis62lXHJzlZ0tq2MS3a2orNtZVyysxWdbSvjkp2t6GzbsUvm9fh049XKP23oKF/9HGb29exvnf3hYcv4fN0jvx6N9tXOcOM+1s7YKXuuneHmfa6d4fZ9rp3hBn6uneEWfq6d4SZ+rp3hNn6uneFGfq4dra089s4ea2fsnj3XjtZWHjtoz7WjtZXHLtpz7Wht5bGT9lw7Wlt57KY9147WVh47as+1o7WVx67ac+1obeWxs/ZcO1pbeeyuPdeO1lYeO2zPtSO1lY+xy/ZcO1Jb+Rg7bc+1I7WVj5fUVj7Gfttz7Uht5WPsuT3XjtRWPsa+22PtjJ2359rR2spj9+25drS28tiBe64dra08duGea0drK4+duOfa0drKYzfuuXa0tvLYkXuuHa2tPHblnmtHayuPnbnn2tHaymN37rl2tLby2KF7rh2trTx26Z5rR2srj52659rR2spjt+65drS28tixe64dra08du2ea0drK4+du+fa0drKY/fuuXa0tvLYwXuuHa2tPHbxnmtHayuPnbzn2tHaymM377l2tLby2NF7rh2trTx29Z5rR2srj52959rR2spjd++5drS28tjhe64dra08dvmea0drK4+dvufa0drKWm7foeX2HVpu36Hl9h1abt+h5fYdWm7foeX2HVpu36Hl9h1abt+h5fYdWm7foeX2HVpu36Hl9h1abt+h5fYdWm7foeX2HVpu36Hl9h1abt+h5fYdWm7foeX2HVpu36Hl9h1abt+h5fYdWm7foeX2FS23r2i5fUXL7Stabl95SW3louX2FS23r2i5fUXL7Stabl/RcvuKlttXtNy+ouX2FS23r2i5fUXL7Stabl/RcvuKlttXtNy+ouX2FS23r2i5fUXL7Stabl/RcvuKlttXtNy+ouX2FS23r2i5fUXL7Stabl/RcvuKlttXtNy+ouX2FS23r2i5fUXL7Stabl/RcvuKlttXtNy+ouX2FS23r2i5fUXL7Stabl/RcvuKlttXtNy+ouX2FS23r2i5fQV1+z7HwO35OQZuuc8xcBu9j6Hu2ecYON2fY+AUfo6B0/I5Br7Vn2OTty/s61hrvLdv5jA91c7krX6qncm0PNXOZAofamfmMD3VzmRrPNXOZBs91c5kyz3VzmR7PtWO1laeOUxPtaO1lWcO01PtaG3lmcP0VDtaW3nmMD3VjtZWnjlMT7WjtZVnDtNT7Wht5ZnD9FQ7Wlt55jA91Y7WVp45TE+1o7WVZw7TU+1obeWZw/RUO1pbeeYwPdWO1Fa2mcP0VDtSW9lmDtNT7UhtZXtJbWWbOUxPtSO1lW3mMD3VjtRWtpnD9FA7M4fpqXa0tvLMYXqqHa2tPHOYnmpHayvPHKan2tHayjOH6al2tLbyzGF6qh2trTxzmJ5qR2srzxymp9rR2sozh+mpdrS28sxheqodra08c5ieakdrK88cpqfa0drKM4fpqXa0tvLMYXqqHa2tPHOYnmpHayvPHKan2tHayjOH6al2tLbyzGF6qh2trTxzmJ5qR2srzxymp9rR2sozh+mpdrS28sxheqodra08c5ieakdrK88cpqfa0drKM+fqqXa0tvLMEXuqHa2tPHPanmpHayvPHLyn2tHaylpun2m5fabl9pmW22dabp9puX2m5faZlttnWm6fabl9puX2mZbbZ1pun2m5fabl9pmW22dabp9puX2m5faZlttnWm6fabl9puX2mZbbZ1pun2m5fabl9pmW22dabp9puX2m5faZlttnWm6fabl9ruX2uZbb51pun2u5ff6S2squ5fa5ltvnWm6fa7l9ruX2uZbb51pun2u5fa7l9rmW2+dabp9ruX2u5fa5ltvnWm6fa7l9ruX2uZbb51pun2u5fa7l9rmW2+dabp9ruX2u5fa5ltvnWm6fa7l9ruX2uZbb51pun2u5fa7l9rmW2+dabp9ruX2u5fa5ltvnWm6fa7l9ruX2uZbb51pun2u5fa7l9rmW2+dabp9ruX2u5fa5ltvnWm6fa7l9ruX2uZbb56jb9z6GOnifY+CW+xwDt9HnGLg1PsfA6f4cA6fwcwycls8x8K3+HAPfvs+x770lqBP0Ofa9twR1bD7HvveWoM7K59j33hLUAfkc+95bMsH0w792SXgOjo0v4PLY+K8k29exbKNj47+S1vrnWOt9cGz8V3J5bDw4l8fGg/O7Y/3lfzw2AYQvj43v7fLY+N4uj43v7fLY+N768eNYXHwDjK9vakce8ftvgJ8a40veW2P8RuytMX59dtaoE+xxb43xi7m3xvgt3ltj/L1ib43xN5a9Ncaju7fG/XNeJyTf3hr3z3mdMHdba0xAur01CHM+Qd721iDM+QRO21uDMOcTjGxvDcKcT4CvvTUIcz5Bs/bWIMz5BKLaW4Mw5xPcaW8NwpxPwKS9NQhzPkGI9tYgzPkE9tlbgzDnEyxnbw3CnE8Amr01CHM+QV321iDM+QRK2VuDMOcTfGRvDcKcT0CPvTUIcz5BMvbWIMz5BJ7YW4Mw5xPMYW8NwpxPgIS9NQhzPkEH9tYgzPnkQ/69NQhzPvk4fm8NwpxPPjjfW4Mw55OPzvfWIMz55EP5vTUIcz75uH9vDcKcT0CCvTUIcz5BFPbWIMz5BH7YW4Mw5xOsYm8NwpxPgI29NQhzPkFB9tYgzPnkF3furUGY88mv2NxbgzDnE3pnbw3CnE9+beXeGoQ5n/BNe2sQ5nxCTu2tQZjzCZO1twZhzie0194ahDmf/CLEvTUIc07g4SqBh6sEHq4SeLgg8HBB4OGCwMMFgYeL1/1zHgQeLgg8XBB4uCDwcEHg4YLAwwWBhwsCDxcEHi4IPFwQeLgg8HBB4OGCwMMFgYcLAg8XBB4uCDxcEHi4IPBwQeDhgsDDBYGHCwIPFwQeLgg8XBB4uCDwcEHg4YLAwwWBhwsCDxcEHi4IPFwQeLgg8HBB4OGCwMMFgYcLAg8XBB4uCDxcEHi4IPBwQeDhgsDDBYGHCwIPFwQeLgg8XBB4uCDwcEHg4YLAwwWBhwsCDxcEHi4IPFwQeLgg8HBB4OGCwMMFgYcLAg8XBB4uCDxcEHi4IPBwQeDhgsDDBYGHCwIPFwQeLgg8XBB4uCDwcEHg4YLAwwWBhwsCDxcEHi4IPFwQeLgg8HBB4OGCwMMFgYcLAg8XBB4uCDxcEHi4IPBwQeDhgsDDBYGHSwIPlwQeLgk8XBJ4uHzdP+dJ4OGSwMMlgYdLAg+XBB4uCTxcEni4JPBwSeDhksDDJYGHSwIPlwQeLgk8XBJ4uCTwcEng4ZLAwyWBh0sCD5cEHi4JPFwSeLgk8HBJ4OGSwMMlgYdLAg+XBB4uCTxcEni4JPBwSeDhksDDJYGHSwIPlwQeLgk8XBJ4uCTwcEng4ZLAwyWBh0sCD5cEHi4JPFwSeLgk8HBJ4OGSwMMlgYdLAg+XBB4uCTxcEni4JPBwSeDhksDDJYGHSwIPlwQeLgk8XBJ4uCTwcEng4ZLAwyWBh0sCD5cEHi4JPFwSeLgk8HBJ4OGSwMMlgYdLAg+XBB4uCTxcEni4JPBwSeDhksDDJYGHSwIPlwQeLgk8XBJ4uCTwcEng4ZLAwyWBh0sCD5cEHi4JPFwSeLhG4OEagYdrBB6uEXi49rp/zhuBh2sEHq4ReLhG4OEagYdrBB6uEXi4RuDhGoGHawQerhF4uEbg4RqBh2soq/Y+NsPPWnsfq6/jZ1ub4Wdba0zGamuNyVhtrTEZq601JmO1tcZkrLbWmIzV1hqTb59ba0xGd2eNGX62tQZhzmf42dYahDmf4WdbaxDmfIafba1BmPMZfra1BmHOZ/jZ1hqEOZ/hZ1trEOZ8hp9trUGY8xl+trUGYc5n+NnWGoQ5n+FnW2sQ5nyGn22tQZjzGX62tQZhzmf42dYahDmf4WdbaxDmfIafba1BmPMZfra1BmHOZ/jZ1hqEOZ/hZ1trEOZ8hp9trUGY8xl+trUGYc5n+NnWGoQ5n+FnW2sQ5nyGn22tQZjzGX62tQZhzmf42dYahDmf4WdbaxDmfIafba1BmPMZfra1BmHOZ/jZ1hqEOZ/hZ1trEOZ8hp9trUGY8xl+trUGYc5n+NnWGoQ5n+FnW2vcP+d9hp9trXH/nPcZfra1xv1z3l/3z3mf4Wdba9w/532Gn22tcf+c9xl+trPGDD/bWoMw5zP8bGsNwpzP8LOtNQhzPsPPttYgzPns17FtrUGYcwIP1wk8XCfwcJ3Aw3UCD9cJPFwn8HCdwMN1Ag/XCTxcJ/BwncDDdQIP1wk8XCfwcJ3Aw3UCD9cJPFwn8HCdwMN1Ag/XCTxcJ/BwncDDdQIP1wk8XCfwcJ3Aw3UCD9cJPFwn8HCdwMN1Ag/XCTxcJ/BwncDDdQIP1wk8XCfwcJ3Aw3UCD9cJPFwn8HCdwMN1Ag/XCTxcJ/BwncDDdQIP1wk8XCfwcJ3Aw3UCD9cJPFwn8HCdwMN1Ag/XCTxcJ/BwncDDdQIP1wk8XCfwcJ3Aw3UCD9cJPFwn8HCdwMN1Ag/XCTxcJ/BwncDDdQIP1wk8XCfwcJ3Aw3UCD9cJPFwn8HD9fh7OXvfzcGeN2+f8rHH7nJ81bp/zs8btc37WuH3Ozxq3z/lZ4/Y5P2vcPudnDcKc38/DnTUIc34/D3fWIMz5/TzcWYMw5/fzcGcNwpzfz8OdNQhzfj8Pd9YgzPn9PNxZgzDn9/NwZw3CnN/Pw501CHN+Pw931iDM+f083FmDMOf383BnDcKc38/DnTUIc34/D3fWIMz5/TzcWYMw5/fzcGcNwpzfz8OdNQhzfj8Pd9YgzPn9PNxZgzDn9/NwZw3CnN/Pw501CHN+Pw931iDM+f083FmDMOf383BnDcKc38/DnTUIc34/D3fWIMz5/TzcWYMw5/fzcGcNwpzfz8OdNQhzfj8Pd9YgzPn9PNxZgzDn9/NwZw3CnN/Pw501CHN+Pw931iDM+f083FmDMOf383BnDcKc38/DnTUIc34/D3fWIMz5/TzcWYMw5/fzcGcNwpzfz8OdNQhzfj8Pd9YgzPn9PNxZgzDn9/NwZw3CnN/Pw5017p/zg8DDHQQe7iDwcAeBhzte98/5QeDhDgIPdxB4uIPAwx0EHu4g8HAHgYc7CDzcQeDhDgIPdxB4uIPAwx0EHu4g8HAHgYc7CDzcQeDhDgIPdxB4uIPAwx0EHu4g8HAHgYc7UB7uc2w4uvVVfhwL/8nWxojb5hrD0d1cYzi6m2sMR3dzjeHobq4xHN3NNYaju7nGcHQ31xiO7uYahDkfI26baxDmfIy4ba5BmPMx4ra5BmHOx4jb5hqEOR8jbptrEOZ8jLhtrkGY8zHitrkGYc7HiNvmGoQ5HyNum2sQ5nyMuG2uQZjzMeK2uQZhzseI2+YahDkfI26baxDmfIy4ba5BmPMx4ra5BmHOx4jb5hqEOR8jbptrEOZ8jLhtrkGY8zHitrkGYc7HiNvmGoQ5HyNum2sQ5nyMuG2uQZjzMeK2uQZhzseI2+YahDkfI26baxDmfIy4ba5BmPMx4ra5BmHOx4jb5hqEOR8jbptrEOZ8jLhtrnH/nJcx4ra5xv1zXsaI2+Ya9895ed0/52WMuG2ucf+clzHitrnG/XNexojb3hpjxG1zDcKcjxG3zTUIcz5G3DbXIMz5GHHbXIMw52PEbXMNwpyPEbfNNQhzPkbcNtcgzPkYcdtcgzDnY8Rtcw3CnI8Rt801CHNO4OEKgYcrBB6uEHi4QuDhCoGHKwQerhB4uELg4QqBhysEHq4QeLhC4OEKgYcrBB6uEHi4QuDhCoGHKwQerhB4uELg4QqBhysEHq4QeLhC4OEKgYcrBB6uEHi4QuDhCoGHKwQerhB4uELg4QqBhysEHq4QeLhC4OEKgYcrBB6uEHi4QuDhCoGHKwQerhB4uELg4QqBhysEHq4QeLhC4OEKgYcrBB6uEHi4QuDhCoGHKwQerhB4uELg4QqBhysEHq4QeLhC4OEKgYcrBB6uEHi4QuDhCoGHKwQerhB4uELg4QqBhzMCD2cEHs4IPJwReDh73T/nRuDhjMDDGYGHMwIPZwQezgg8nBF4OCPwcEbg4YzAwxmBhzMCD2cEHs4IPJwReDgj8HBG4OGMwMMZgYczAg9nBB7OCDycEXg4I/BwRuDhjMDDGYGHMwIPZwQezgg8nBF4OCPwcEbg4YzAwxmBhzMCD2cEHs4IPJwReDgj8HBG4OGMwMMZgYczAg9nBB7OCDycEXg4I/BwRuDhjMDDGYGHMwIPZwQezgg8nBF4OCPwcEbg4YzAwxmBhzMCD2cEHs4IPJwReDgj8HBG4OGMwMMZgYczAg9nBB7OCDycEXg4I/BwRuDhjMDDGYGHMwIPZwQezgg8nBF4OCPwcEbg4YzAwxmBhzMCD2cEHs4IPJwReDgj8HBG4OGMwMMZgYczAg9nBB7OCDycEXg4J/BwTuDhnMDDOYGH89f9c+4EHs4JPJwTeDgn8HBO4OGcwMM5gYdzAg/nBB7OCTycE3g4J/BwTuDhnMDDOYGHcwIP5wQezgk8nBN4OCfwcE7g4ZzAwzmBh3MCD+cEHs4JPJyjPNznGDi6n2PgNH6OgQP2OQbOzOcYOAafY+Cb/TkGvqyfY+D79z6GolefY997S1BA6nPse28JijF9jn3vLUFho8+x770lKBL0Ofa9twQFdz7HvveWoHjN59i33pI6/iHQwz+L8vzPHBwb/9P2EfXrWNY/Hpv8a/WXx8b/AP3vj7XX4Nj435S/PDb+59Uvj43/xfR8lc+xLMfg2PgfQb86Nv5meH1s/DeZ3r6OeR8cG/9NXh4bvpPXx4ab6/rY+N4uj03u7erY5N6ujo3n7fLYeN6ujo2/v10f+95bMv7+dn3se2/J+Pvb9bHvvSXj72/Xx773loy/v10f+95bMv7+dn3se2/J+Pvb9bHvvSVjyPP62OQtaV/fFrMNvi2OUczrY5O35OrY5C25OjZ5Sy6OjbHG62OTt+Tq2OQtuTo2eUuujk3ekqtj33tLxiDf9bHvvSVj3O762PfekjEUd33se2/JGF27Pva9t2QMmF0f+95bMsbAro997y0Zw1rXx773loyRqutj33tLxuDT9bHvvSVjPOn62PfubQzfXB4bcyiv95nf/7+bQYr2G0b/idF+Q9e+nrY2fDxf+fV4vtrvH/+0M7yh59oZ3vxz7QzfqOfaGe6z59oZ7snn2hnO8XPtDPfDc+0Mv1881U6MUaDn2qFu5a+I7/zvLKN2qFv5uh3qVr5uh7qVr9uhbuXrdqhb+bod6lZuPx5vZTjo1K182c6YYrqpnRa/aydfo3aYe2ehHebeWWiHuXcW2mHunYV2mHtnoR3m3lloh7l3Ftph/jR43c7408nn2tHayuNPU59rR2srj6G359rR2srjz8afa0drK48Bvefa0drKY9LhuXa0tvKYzHiuHa2tPCZJnmtHayuPyZfn2tHaymNS57l2tLbymCx6rh2trTwmoZ5rR2srj8mt59rR2spj0uy5drS28piMe64dra08Jvmea0drK4/Jw+fa0drKY1LyuXa0tvKY7HyuHa2tPCZRn2tHayuPydnn2tHaymPS97l2tLbymEx+rh2trTwmqZ9rR2srj8nv59rR2spjUv25drS28pisf64dra08NgGea0drK4/Nhefa0drKY9PiuXa0tvLYDHmuHa2tPDZZnmtHayuPzZvn2tHayuNfN/xcO1pbeexRPdeO1lYe/2rk59rR2spUe22hHa2tTLXXFtrR2spUe22hHa2tTLXXFtqR2spJtdcW2pHaykm11xbakdrK+ZLaykm11xbakdrKSbXXFtqR2so5/l3ij7Uz/rXjz7WjtZW13L7UcvtSy+1LLbcvtdy+1HL7UsvtSy23L7XcvtRy+1LL7Ustty+13L7UcvtSy+1LLbcvtdy+1HL7UsvtSy23L7XcvtRy+1LL7Ustty+13L7UcvtSy+1LLbcvtdy+1HL7UsvtSy23L7XcvtRy+1LL7Ustty+13L7UcvtSy+1LLbcvtdy+pOpivdSvx/vv/rWe37XDHPTrdphClB/H55/E+e2/bdQO8VX28vKvdkpcPN7t81fZ24/OvXx1TnzrN3dO/LFlc+fEn3D+Weefdog/4ay0Q1x8K+0QF99KO8SfcFbaIf6Es9AOU4FaaUdkuX7aYW5Me9lXO/byUTvMNbjQDnMNLrTDXIML7TDX4EI7zDW40A5zDV63w1SgVtphbuWFdphbeaEdra3MVKBW2tHaykwFaqUdra3MVKBW2tHaykwFaqUdra3MVKBW2tHaykwFaqUdra3MVKBW2pHayo0q+fT29U9U+WuUlTaq5LPQDjP2X2iH+WHsQjvEvbPSDvPD2IV2qJ/R/H/tDD4UaVTJZ6Ed5oexC+0wP4y9bocq+Sy0w/xp8OU/PlB75eh7FlPyWWmH+fPOQjvMn3eO48e7cx4YtcP8eWehHeb/C11oh/n/Qq/bYWosK+0w985CO8y9s9AO8/+FLrTD/H+hC+0wt/JCO1pbmamxrLSjtZWZGstCO0yNZaUdra3M1FhW2tHaykyNZaUdra3M1FiuScHG1FhW2uFu5ct2uFv5qh2mxrLSDncrX7bD3cqX7XC38mU73K182Q53K1+2o7WVmRrLSjtaW5mpsSy0w9RYVtrR2spMjWWlHa2tzPwnqlba0drKTOdopR2trcz8J6oW2tFSoBpVgVpoZzjo5Wjvc6XWr1Px49RwHi9PDcfm8tTw7b48NXwJr06NRYR8xftUehudGu7uy1PDv/nLU8O/+ctTw7/Dy1PDv8PLU8Ofgq5OjVHs+al//OP/AeL7KUA=",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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"
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n\n\ncontract zkPetitsChevaux {\n\n    use dep::aztec::{\n        hash::pedersen_hash,\n        selector::compute_selector,\n        context::{PrivateContext, PublicContext, Context},\n        types::type_serialization::{\n            TypeSerializationInterface,\n            field_serialization::{FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n        },\n        state_vars::{map::Map, public_state::PublicState, set::Set},\n        types::address::{AztecAddress},\n    };\n\n    // docs:end:storage_struct\n    use crate::types::{\n        game::{Game, GameSerializationMethods, GAME_SERIALIZED_LEN, serializeGame, deserializeGame, serializeField4, deserializeField4},\n    };\n\n    // docs:start:storage_struct\n    struct Storage {\n        dices: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        horses: PublicState<[Field;4], 4>,\n        players: PublicState<[Field;4], 4>,\n        seedHashes: PublicState<[Field;4], 4>,\n        winner: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        round: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        last_timestamp: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        debug: PublicState<Field, FIELD_SERIALIZED_LEN>,\n    }\n\n    // docs:start:storage_init\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                dices: PublicState::new(\n                    context,\n                    1,\n                    FieldSerializationMethods,\n                ),\n                horses: PublicState::new(\n                    context,\n                    2,\n                    TypeSerializationInterface {\n                        serialize: serializeField4,\n                        deserialize: deserializeField4,\n                    }\n                ),\n                players: PublicState::new(\n                    context,\n                    6,\n                    TypeSerializationInterface {\n                        serialize: serializeField4,\n                        deserialize: deserializeField4,\n                    }\n                ),\n                seedHashes: PublicState::new(\n                    context,\n                    10,\n                    TypeSerializationInterface {\n                        serialize: serializeField4,\n                        deserialize: deserializeField4,\n                    }\n                ),\n                winner: PublicState::new(\n                    context,\n                    14,\n                    FieldSerializationMethods,\n                ),\n                round: PublicState::new(\n                    context,\n                    15,\n                    FieldSerializationMethods,\n                ),\n                last_timestamp: PublicState::new(\n                    context,\n                    16,\n                    FieldSerializationMethods,\n                ),\n                debug: PublicState::new(\n                    context,\n                    17,\n                    FieldSerializationMethods,\n                ),\n            }\n        }\n    }\n    // docs:end:storage_init\n\n    // docs:start:constructor\n    #[aztec(private)]\n    fn constructor(dicesAddress: Field) {\n        let selector = compute_selector(\"_constructor(Field)\");\n        context.call_public_function(context.this_address(), selector, [dicesAddress]);\n    }\n\n    // docs:end:constructor\n    #[aztec(public)]\n    internal fn _constructor(dicesAddress: Field) {\n        storage.dices.write(dicesAddress);\n    }\n\n    #[aztec(private)]\n    fn register(dicesAddress: Field, seed: u96) {\n        let rollSelector = compute_selector(\"roll(u96,u96)\");\n        let _ = context.call_private_function(dicesAddress, rollSelector, [0, seed as Field]); \n        let seedHash = pedersen_hash([seed as Field], 10);\n\n        let selector = compute_selector(\"_register(Field,Field)\");\n        context.call_public_function(context.this_address(), selector, [context.msg_sender(), seedHash]); \n    }\n\n    #[aztec(public)]\n    internal fn _register(user: Field, seedHash: Field) {\n        let mut players = storage.players.read();\n        let mut seedHashes = storage.seedHashes.read();\n        let mut registered = false;\n        for i in 0..4 {\n            if players[i] == 0 {\n                if registered == false {\n                players[i] = user;\n                seedHashes[i] = seedHash;\n                registered = true;\n                }\n            }\n        }\n        if players[3] != 0 {\n            storage.last_timestamp.write(context.timestamp());\n        }\n        storage.players.write(players);\n        storage.seedHashes.write(seedHashes);\n    }\n\n    #[aztec(private)]\n    fn play(dicesAddress: Field, seed: u96, player: Field, move: u8) {\n       let seedHash = pedersen_hash([seed as Field], 10);\n       let rollSelector = compute_selector(\"roll(u96,u96)\");\n       let _ = context.call_private_function(dicesAddress, rollSelector, [0, seed as Field]); \n       let playSelector = compute_selector(\"_play(Field,Field,u8)\");\n       context.call_public_function(context.this_address(), playSelector, [seedHash, player, move as Field]);\n    }\n\n    #[aztec(public)]\n    internal fn _play(seedHash: Field, player: Field, move: u8) {\n        let currentRound = storage.round.read();\n        assert(currentRound as u120 % 4 == player as u120, \"Not your turn\");\n        let selector = compute_selector(\"readDice(Field,u96)\");\n        let return_values = context.call_public_function(storage.dices.read(), selector, [context.this_address(), 0]);\n        storage.debug.write(return_values[0]);\n        let diceValue = return_values[0] as u8;\n        let mut horsesRawValue: [Field;4] = storage.horses.read();\n        let spawnPoint: u120 = 1 + (player * 14) as u120;\n        let endPoint: u120 = 1 + ((((player * 14) + 55) as u120) % 56);\n        if move < 4 {\n            // get horse id based on player\n            let horseId: u120 = move as u120;\n            let mut horsesValue: u120 = horsesRawValue[player as u8] as u120;\n            let horsePosition = (horsesValue >> (8 * horseId));\n            if horsePosition == 0 {\n                if diceValue == 6 {\n                    for i in 0..4 {\n                        for y in 0..4 {\n                            assert(((horsesRawValue[i] as u120) >> (8 * (y as u120))) & (0xFF as u120) != spawnPoint , \"Horse already on spawn point\");\n                        }\n                    }\n                    horsesValue = horsesValue | (1 << (8 * horseId));\n                } else {\n                    assert(false, \"You can only move a horse out if you roll a 6\");\n                }\n                horsesRawValue[player as u8] = horsesValue as Field;\n            } else {\n                let mut newHorsePosition = horsePosition + diceValue as u120;\n                if (horsePosition == endPoint) {\n                   let expected = 1;\n                   if expected as u8 == diceValue {\n                    newHorsePosition = 57;\n                   } else {\n                    newHorsePosition = horsePosition;\n                   }\n                } else {\n                    if horsePosition > 56 {\n                        let expected = horsePosition - 55;\n                        if expected as u8 == diceValue {\n                            newHorsePosition = horsePosition + 1;\n                        } else {\n                            newHorsePosition = horsePosition;\n                        }\n                    } else {\n                let mut invalidPos = true;\n                for i in 0..16 {\n                    if invalidPos == true {\n                    for hi in 0..4 {\n                        for hy in 0..4 {\n                            if ((horsesRawValue[hi as u120] as u120) >> (8 * (hy as u120))) & (0xFF as u120) == newHorsePosition {\n                                    if hi == player {\n                                        if hy != move {\n                                            if newHorsePosition > 0 {\n                                                newHorsePosition -= 1;\n                                            } else {\n                                                newHorsePosition = 55;\n                                            }\n                                        }\n                                    } else {\n                                        horsesRawValue[hi as u120] = ((horsesRawValue[hi as u120] as u120) & !(0xFF << (8 * (hy as u120)))) as Field;\n                                        invalidPos = false;\n                                    }\n                            }\n                        }\n                    }\n                    }\n                }\n\n                if horsePosition < endPoint {\n                    if newHorsePosition > endPoint {\n                        newHorsePosition = endPoint - (newHorsePosition - endPoint);\n                    }\n                }\n\n                if newHorsePosition > 56 {\n                    newHorsePosition = ((newHorsePosition - 1) % 56) + 1;\n                }\n                }\n                }\n\n                horsesRawValue[player as u120] = ((((horsesRawValue[player as u8] as u120) & !(0xFF << (8 * (horseId as u120)))) as u120) | ((newHorsePosition << (8 * horseId)) as u120)) as Field;\n                if (newHorsePosition == 62) {\n                    storage.winner.write(player + 1);\n                }\n            }\n            storage.horses.write(horsesRawValue);\n            if diceValue != 6 {\n                storage.round.write(currentRound + 1);\n            }\n        }\n    }\n\n    unconstrained fn players() -> [Field; 4] {\n        storage.players.read()\n    }\n\n    unconstrained fn seedHashes() -> [Field; 4] {\n        storage.seedHashes.read()\n    }\n\n    unconstrained fn dices() -> Field {\n        storage.dices.read()\n    }\n\n    unconstrained fn horses() -> [Field;4] {\n        storage.horses.read()\n    }\n\n    unconstrained fn winner() -> Field {\n        storage.winner.read()\n    }\n\n    unconstrained fn round() -> Field {\n        storage.round.read()\n    }\n\n    unconstrained fn last_timestamp() -> Field {\n        storage.last_timestamp.read()\n    }\n\n    unconstrained fn debug() -> Field {\n        storage.debug.read()\n    }\n\n\n    // Below this point is the stuff of nightmares.\n    // This should ideally not be required. What do we do if vastly different types of serialized_notes?\n\n    // docs:start:compute_note_hash_and_nullifier\n    // Computes note hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(_: Field, _: Field, _: Field, _: [Field; 0]) -> [Field; 4] {\n        [0, 0, 0, 0]\n    }\n    // docs:end:compute_note_hash_and_nullifier\n}\n// docs:end:token_all\n",
        "path": "/home/mortimr/projects/ethglobal/turkish/zkgames/src/contracts/zkpticv/src/main.nr"
      },
      "35": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "41": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/aztec/context.nr"
      },
      "42": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/aztec/hash.nr"
      },
      "57": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "58": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/aztec/oracle/call_private_function.nr"
      },
      "65": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/aztec/oracle/enqueue_public_function_call.nr"
      },
      "66": {
        "source": "use crate::constants_gen::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}\n",
        "path": "/aztec/oracle/public_call.nr"
      },
      "68": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/aztec/oracle/storage.nr"
      },
      "70": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}",
        "path": "/aztec/private_call_stack_item.nr"
      },
      "71": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/aztec/public_call_stack_item.nr"
      },
      "72": {
        "source": "use crate::utils::field_from_bytes;\n\nglobal SELECTOR_SIZE = 4;\n\npub fn compute_selector<N>(signature: str<N>) -> Field {\n    let bytes = signature.as_bytes();\n    let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n    \n    let mut selector_be_bytes = [0; SELECTOR_SIZE];\n    for i in 0..SELECTOR_SIZE {\n        selector_be_bytes[i] = hash[i];\n    }\n\n    field_from_bytes(selector_be_bytes, true)\n}",
        "path": "/aztec/selector.nr"
      },
      "76": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "85": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
        "path": "/aztec/types/type_serialization/field_serialization.nr"
      },
      "88": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/aztec/utils.nr"
      }
    }
  },
  "aztecNrVersion": "aztec-packages-v0.15.0"
}