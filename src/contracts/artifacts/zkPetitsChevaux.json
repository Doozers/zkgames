{
  "name": "zkPetitsChevaux",
  "functions": [
    {
      "name": "_constructor",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "dicesAddress",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_register",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "user",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "seedHash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "_",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "_",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "_",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "_",
          "type": {
            "kind": "array",
            "length": 0,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+2UYQ7CIAyFCzi2zsQ7eANMPMDufyph0uRZ9ZfPH8vWpGFroXx9AUYRCfK0VP0k72b5pY/lN7sFXq3yT864Ec5E5AwfOAOcizYO1XP1sfq1x7XH7RxZzNZFiCVXXyFvluF7IfWW+dqXofMLjNjvBbQi7ntXpxHq6XUT2L+tmbgsq65KrtlqzMBvvRr7GfIKc2Yux/pWTfKqqf0j38G6b1aFWIZYdMztHvp7SgP1db892mYPr80/z/0HAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "dicesAddress",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+2dB5QbRRKGS9Ku1jZ4DVywDQZsE2yDwaOR1jsiLDZeDJhwJpoMWgVjvF7HJefMRS5zcIHjcuYylzkuZy7nO47LOWcw9I9roLXW+o2eqvXUr7bfq1eyXNvqr8PMP9JMdW+KaJqxuMQvl7APWiu5blNHd4N688HiQqHaH1Zz+VwpCItDUV9Q6BtaHOWiXF/UVwmjfL4aFaL+4lCxPyjmCvlqrtZXzNe44m65NgYuuLOmjqwD7myHc/eYOnoccPcIc48331tt5wzBdqa4L2dzfdONbTU2Q6lfaGwmjxn6ZRful5kd0K7drXbNnhivJ/tljwbjtUcHtGuWsQw9tf5T1muy3kNZwj5oreSmk+yxIS57GpvCrycbS4/hyFqvlwixZOX754lzetbiiEvM02tskrGp/O8NpfLapZtWj66rjmzZbHdIZswApqxKUtYHdI2Jtzsv/j/7ZCbei9SAUqruWSR3VttTrl1Bxupwu0ivtjS5UQxScyDKFcNKKdyhGglaK3VzIGix2IspXoF7Gdubtp3x5hiba2wfY/sa28/Y/sbmGZtvbIGxA4xN47+1F2Daem/s4m3TES1wdUSbZHHQGN5eZsnKfm4Fn9VN9WXsQWxJg/5EW2fy6+rIxtHqaHXl6NDwmvLy0ZHyljXrR5aVhoftiRB/SDwhMg0gx77fZXVID7/utt6L/67H8s6OwBnafnYRya/E2dTZRyMuod0XB7JfaA2QfSrFQD7WoM9sLZXmmPQOYlLj1DPeinE2GWI4gD86pjFSn7GQO1T6wnMhuZlgGWH+2QLM1dq2cqAH/Sct6ySZD7LqykX5MOzPIy6qBLlCpRxGYVgZKgTloFQOq8VCrlgrhIV8uVIeMnWWcrWgVioXa9G2dtkXU3aRXj8HkbykQTmYtpcjZM1/B/KgTv436j+nBztXg3Owg3oXkdykd8W9SH6MGrZV4kC3yEG9AckuTCzCgH27VNoccnMSEJ4XdSotPoqEpEylAdyVSgu5Q6UXSUhuJpi0SpsjwByrtJwH/Set0iSZ8+SfSsuT7MkgLgWaUGkig1NwUG8fdbZKA3ef/Bg5UWkht1W63sUkuzCxCBdTe1XaXHJzEhCeF3UqrZ99RMpUGsBdqbSIO1R6kUTkZoJJq7S5AsyxSuv3oP+kVZokc5H8U2lFkj0ZxOUQmlBpIoNziIN6D6XOVmngPlR+jJyotIjbKl3vYSS7MLEID6P2qrR55OYkIDwv6lTa4ewHSJlKA7grlTbAHSq9SAbIzQSTVmnzBJhjlXa4B/0nrdIkmY8g/1TaESR7MiCrfRMqrcU648GRrncpdbZKA/dS+TFyotIGuK3S9R5JsgsTi/BIaq9Km09uTgLC86JOpS1jP0jKVBrAXam0Qe5Q6UUySG4mmLRKmy/AHKu0ZR70n7RKk2Q+ivxTaUeR7MkgLstpQqWJDM5yB/UeTZ2t0sB9tPwYOVFpg9xW6XqPIdmFiUV4DLVXpS0gNycB4XlRp9KOZb+ClKk0gLtSaSu4Q6UXyQpyM8GkVdoCAeZYpR3rQf9JqzRJ5uPIP5V2HMmeDOJyPE2oNJHBOd5BvSdQZ6s0cJ8gP0ZOVNoKbqt0vSeS7MLEIjyRtldn0gfUtGAf7EVuTiLSY7W3QDsbPf0uPTaSGRAOaNPYBK2V3IAn7Rz0pJ3tEnatzs+0IPM+Cpn3JT+Ovc8iuWMv2obkCrFwRd1xfiT4kH3EHjmGVjJTnOctHtetlt+P/f604zxMuxo7yaovFsvjxeOK/uQm409pMv7UJuNPazL+9CbjVzUZf0aT8Wc2GX9Wk/FnNxl/TpPx5zYZf16T8ec3GX9Bk/ElKz49TjyysgwljCsnjKskjKsmjKsljFudMO7ChHFrEsZdlDBubcK44YRx6xLGjSSMW58wbkPCuI1W3CqOO4n/fxYly6d3MvtT2J/K/jT2p7Nfxf4M9meyP4v92ezPYX8u+/PYn8/+AvYl9kPsy+wr7Kvsa+xXs7+Q/Rr2F7Ffy36Y/Tr2I+zXs9/AfmPC/pnw7fFIjbKJtj/+xrpkJftN7Hcztpnqi/Q1aIrktN8Wao8uD1orot+JjHrCnBFkvtgT5i5B5ks8Ye4WZL7UE+asIPNlnjD3CDJf7gnz7oLMV3jCPEOQ+UqFzFcpZL5aIfM1CpmvVch8nULm6xUy36CQ+UaFzDcpZL5ZIfMtCplvVch8m0LmZytkfo5C5ucqZH6eQubnK2R+gULm2xUyv1Ah84sUMr9YIfNLFDK/VCHzyxQyv1wh8x0KmV+hkPlOhcx3KWR+pULmVylkfrVC5tcoZL5bIfNrFTLfo5D5dQqZX6+Q+Q0Kmd+okPlNCpnfrJD5LQqZ36qQ+W0Kmd+ukPkdCpnfqZD5XQqZ71XI/G6FzO9RyPxehczvU8j8foXMH1DI/EGFzPcpZP6QQuYPK2T+iELmjypk/phC5o8rZP6EQub7FTJ/UiHzAwqZP6WQ+dMKmT+jkPmzCpk/p5D58wqZv6CQ+YsKmb+kkPnLCpm/opD5qwqZv6aQ+UGFzF9XyPwNhczfVMj8LYXM31bI/B2FzN9VyPw9hczfV8j8A4XMP1TI/COFzD9WyPwThcw/Vcj8kELmnylkflgh888VMv9CIfMvFTL/SiHzrxUy/0Yh828VMv9OIfPvFTL/QSHzHxUy/0kh858VMv9FIfNfFTL/TSHz3z1h3izI/A+F4/xPhcz/Usj8b4XM/1HI/F+FzP9TyPx/hcyPKGR+VCHzVoXMj3nCPEmQmVJ+ME8WZE55wjxFkDntCfNOgswZT5h3FmTu8oR5qiBztyfMvYLMWU+Ypwky93jCvIsg8yRPmHcVZJ7sCfNugsxTPGF+miDzTp4wP12QeWdPmJ8hyDzVE+ZnCjL3CjJP53pSzJwx1mWs21jWWI8xXBPiGgnXDNDQ0JTQWNAcOAfjnIRjNI5ZWMOY0xhjME+3+vQu9luMjRq72Nglxi41dpmxy41dYexKY1cZu9rYNcauNXadseuN3WDsRmM3GbvZ2C3GbjV2mzHsc49937EPOvYFxz7Z2Df6dmPYVxj77GLfWezDin1JsU8n9q28wxj2NbyT24h94LAvGvYJw75ZdxvDvkr3GMO+O9iHBvuyYJ8S7NuBfSywrwP2OUDef+TBR1545ElH3vB7jSGvNPIsI+8w8vAiLy3ytCJv6X3GkNcSeR6R9xB5AJEXD3nikDftfmPIq/WAMeRdQh4i5OVBnhrkbUEeE+T1QJ4L5H1AHgTkBcBz8nhu/EFjeK4Yz9niuVM8h4nnEvGcHp5bw3NceK4Jz/nguRc8B4LnIvCcAO6bf8gY7qt+2Bjuu8V9qLgvE/cp4r493MeG+7pwnxPu+8F9MLgvBPdJ4L4B/I6O35XxOyt+d8TvcPhdCr/T4HcLfI+P77XxPS++98T3gPheDN8T4XsTTE5cV+M6E9dduA6BLodOhW6DjsF5Hec5HPdxHMRxAeskLo8DnPUOXqjvAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "register",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "dicesAddress",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "seed",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 96
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+1dBZQUxxat2WUlBBZNYNFFggaYmd1lZ3F3dyerhLA4S9zdiQtxd3cDEhJixIgRIwKRHyeu/Pf+3j70bIb8mbOv5kyfN33OPXeTKWrqvqrqut3T/Wq7z5hFBOdw/hwA9tfsCKRRHWkR6s3198zLKysIlgVyA0X+YGFxKN+fl1/cMxQIBfJD+aXBUG5uWSgvVFBYXFjgLwzk5ZYFyvMLc8tRcZpcG/02dKdTHekWdKcnuO4MqiPDgu4MQd3cthRCU8IBJvyQbne2cLs5Djmorwnhb+hgzlbG+xOaoc84LvURl2YJ0K7mrnbloF3Zyf4yLSL0V4sEaFdLQqrZPf+dc0SkYwDYX8PDuL5LsN5AUyN7znGOVoTa+HuvCPFJl49RMF0+Pv/zDukuHc7h6MkiZBLq4r+XFZUsGrhiQeXisiWrVroDklqtA92DJsX1BbWqlXcHz/nMvWhKRzFgIqiUqrulkVstW8m1y5/qCrj7kJ5tTYz8GUFyDPQMFRaVlOeX24xBSyN/xmG+Gn+3NlWraBtCW0I7QnvCfoQOhI6EToTOhC6ErqbqrN6N0J3Qg9tF4IkQ5HFKyCPkE3oSCgghQiGhF6E3oQ+hL6EfoT/0DSQMIgwmDCEMJQwjDCeMIIwkjCKMJowhjCWMI4wnTCBMJEwiTCZMIUwlTCNMJ8wgzCTMIswmzCHMJcwjzDdVTrWIUEwoIZQSygjcsQsIBxIWEg4iLCJUEBYTlhCWEpYRlhNWEFYSVhEqCasJBxMOIRxKOIxwOOEIwpGEowhHE44hHEs4jnA84QTCiYSTCCcTTiGcSjiNcDrhDMKZhLMIZxPWEM4hnEs4j3A+4QLChYSLCBcTLiFcSlhLuIxwOeEKwpWEq0zVeLiGcC3hOsL1hBsINxJuItxMuIVwK+E2wu2EOwh3Eu4i3E24h3Av4T7C/YQHCA8SHiI8THiE8CjhMcLjhCcI6wj1TNXhPqG7T/LVF4M4rZB+WytkpkuHqaY3C1rSRb+3KMDflWbCj+qL4oAI8eS2NsLfJUUVFRNWLFxdtKpsWOWSklULly5xn1Kc6p1TS2oEedX/fy1XKDLwd5rr/zn/LsPF1tbyVBPZmUqf09uYxF7XcATdsVgP3uDqILcp447cFSFmPtffKSiT8i9lfHuoZ09zxdpgcMStJ/xVrTFS37EBAZW+NbLB2BlgqcL62whoLiuvOtZ7IH7SFwiSmp901RUI5QaDBblcLlTqD+SVlgRDwWBpcZ6/xF9UEiwrzAsUlucF83JLSkuKqc6iQLm/vKiksDxU1S735b77kJ4/T8rVFXY5/pT5pxHhwxn/FoxB2IVkpPhZPdnZ6pynLNS70cgNelu6N8r3UcS2SpzoNlqo92kjOzF5Ej4NjpdLa2vsLALC4yLMpT0D3mSUuTQWbsulbUJApSfJJmNngEm7tLYCmh2X9owH4ift0iQ1P2u859KeNbKLgXM8Z5IuTaRznrNQ7/MmsV0a635evo+suLRNaKt0vS8Y2YnJk/AFE1+X1s7YWQSEx0WYS3sRvNkoc2ks3JZL24yASk+SzcbOAJN2ae0ENDsu7UUPxE/apUlqfsl4z6W9ZGQXA+d42SRdmkjnvGyh3ldMYrs01v2KfB9ZcWmb0Vbpel81shOTJ+GrJr4urZOxswgIj4swl/YaeItR5tJYuC2XtgUBlZ4kW4ydASbt0joJaHZc2mseiJ+0S5PU/Lrxnkt73cguBs7xhkm6NJHOecNCvW+axHZprPtN+T6y4tK2oK3S9b5lZCcmT8K3THxdWmdjZxEQHhdhLu1t8FajzKWxcFsubSsCKj1Jtho7A0zapXUW0Oy4tLc9ED9plyap+R3jPZf2jpFdDJzjXZN0aSKd866Fet8zie3SWPd78n1kxaVtRVul633fyE5MnoTvm/i6tC7GziIgPC7CXNoH4G1GmUtj4bZc2jYEVHqSbDN2Bpi0S+sioNlxaR94IH7SLk1S84fGey7tQyO7GDjHRybp0kQ65yML9X5sEtulse6P5fvIikvbhrZK1/uJkZ2YPAk/MfF1aeuMnUVAeFyEubTt4B1GmUtj4bZc2g4EVHqS7DB2Bpi0S1snoNlxads9ED9plyap+VPjPZf2qZFdDJzjM5N0aSKd85mFej83ie3SWPfn8n1kxaXtQFul6/3CyE5MnoRfmH+6M+kTahPBGLQ2dhYR6b7KEWhnpGxX0n0jmfGsa5z6xl+zI7DDI+3c4pF2bvVIO+N1m7Cm8yhFUHN7j2gWzDwY2M94Y434j5FbI7htnKrLMdhcN+eD3QDeBN4M5tynX0KTk+fa6Vf+3MnH3AHc0fx73tkGhK9c9TnZzB7E5w+BHwY/An4U/Bi4DuFrVz1rUM9X+Lyl2Z3nlrkbuDu4B9gPDoCD4FxwHjgf3BNcAA6BC8G9wL3BfcB9wf3A/cEDwAPBg8CDwUPAQ8HDwMPBI8AjwaPAo8FjwGPB48DjwRPAE8GTwJPBU8BTwdPA08EzwDPBs8CzwXPAc8HzwPPBB4CLwMXgEnApuAxcDl4APhC8EHwQeBG4ArwYvAS8FLwMvBy8ArwSvApcCV4NPhh8CPhQ8GHgw8FHgI8EHwU+GnwM+FjwceDjwSeATwSfBD4ZfAr4VPBp4NPBZ4DPBJ8FPhu8BnwO+FzweeDzwReALwRfBL4YfAn4UvBa8GXgy8FXgK8EXwW+GnwN+FrwdeDrwTeAbwTfBL4ZfAv4VvBt4NvBd4DvBN8Fvht8D/he8H3g+8EPgL8GPw5+Asw/fX5jdp+XnJsWznnyS/A34IaEb13lnbXDyZfO59/vXJ/n4HMfPv8O7JV86JL5y793xaU+4vJ9ArRrp/n/edWlPavPyHsZ6TZ+J9hG9824H0wyR3syR3v1uncaOQf+g1y74pajXfDq0M7vnKHcouLCkpDNGOw08mccZmcG/kj4ifAz4RfCr4TfCL8T/iD8aap+vuSVYRf+cTKntu2c2v7SmuTUzsbfZUuWV5ZVlk2oLK5YWOJk1R5cVFHhHgjOlzgDIplZew/f87NJ8LNR1RH21IUPQUjxKXvqgoXbeuqCg8mQvknGdQq10epTFz8LaHaeuvD5Ej9+0rZOUnOqz3tPXaQK9pO7vbV8yacuRDqnlk++3jTBQW9Ld5pPvI+sPHWRgrZK15suPDF5EnKdKSZ+z8b+YuwsAsLjIsylZSAImdpcWoZFl8bBzLQwSTI94tJ+EdDsuLQMX+LHT9qlSWrey4MubS9LLq120qXJdE5tCy5t7wR3aax7b4+4tEy0VbreOhZcWp04u7RfjZ1FQHhchLm0ughCljaXVteiS+NgZlmYJFkecWm/Cmh2XFpdX+LHT9qlSWqu50GXVs+SS6ufdGkynVPfgktrkOAujXU38IhLy0JbpettaMGlNYyzS/vL2FkEhMdFmEtrhCA01ubSGll0aRzMxhYmSWOPuLS/BDQ7Lq2RL/HjJ+3SJDXv40GXto8ll7Zv0qXJdM6+FlxakwR3aay7iUdcWmO0VbrephZcWtM4u7S/jZ1FQHhchLm0bAShmTaXlm3RpXEwm1mYJM084tL+FtDsuLRsX+LHT9qlSWpu7kGX1tySS2uRdGkyndPCgktrmeAujXW39IhLa4a2StfbyoJLaxVnl7bL2FkEhMdFmEtrjSDkaHNprS26NA5mjoVJkuMRl7ZLQLPj0lr7Ej9+0i5NUnMbD7q0NpZcWtukS5PpnLYWXFq7BHdprLudR1xaDtoqXW97Cy6tvc9+zsYUwRj8aOwsItJ99ZNEOyO8/S7dN5IZEIwvPn3jr9kRaOyRdjbzSDvjZewSKRfib0af5t+NN869+/nkzr3cNncuRK6bb4OngDPBWb7dubg6YO2PlAvR4T/Af5p/zxXFuRA7uupzzPKeyvMVfacYy3eOsXyXGMt3jbH8/jGW7xZj+e4xlu8RY3l/jOUDMZYPxlg+N8byeTGWz4+xfM8Yyxe4yqfsoTxnZQlFWa4wynK9oizXO8pyfaIs1zfKcv2iLNc/ynIDoiw3MMpyg6IsNzjKckOiLDc0ynLDoiw33FVuOsp1xPl+p4ku518nlO8M7gLuCt4f3A3cHdwD7AcHwEFwLjgPnA/uCS4Ah8CF4F7g3uA+4L7gfuD+4AHggeBB4MHgIeCh4GHg4b7o4pPk+DDn1R8R4fzr+JIO6K8RYM49OtIxaK6yfAwA+2t2hOWlrKn3GxWnaxF/zQ7ReyKjPaI5VVDzGI9oriWoeaxHNKcJah7nEc3pgprHe0RzhqDmCR7R3FxQ80SPaM4W1DxJoebJCjVPUah5qkLN0xRqnq5Q8wyFmmcq1DxLoebZCjXPUah5rkLN8xRqnq9Q8wEKNRcp1FysUHOJQs2lCjWXKdRcrlDzAoWaD1SoeaFCzQcp1LxIoeYKhZoXK9S8RKHmpQo1L1OoeblCzSsUal6pUPMqhZorFWperVDzwQo1H6JQ86EKNR+mUPPhCjUfoVDzkQo1H6VQ89EKNR+jUPOxCjUfp1Dz8Qo1n6BQ84kKNZ+kUPPJCjWfolDzqQo1n6ZQ8+kKNZ+hUPOZCjWfpVDz2Qo1r1Go+RyFms9VqPk8hZrPV6j5AoWaL1So+SKFmi9WqPkShZovVah5rULNlynUfLlCzVco1HylQs1XKdR8tULN1yjUfK1Czdcp1Hy9Qs03KNR8o0LNNynUfLNCzbco1HyrQs23KdR8u0LNdyjUfKdCzXcp1Hy3Qs33KNR8r0LN9ynUfL9CzQ8o1PygQs0PKdT8sELNjyjU/KhCzY8p1Py4Qs1PKNS8TqHm9Qo1b1Co+UmFmp9SqHmjQs1Pe0Tzt4Kan1HYz5sUan5WoebnPKJ5pE9O8/MK+/kFhZpfVKh5s0LNLynU/LJCza8o1PyqQs2vKdS8RaHm1xVqfsMjmjMFNb/pEc17CWp+yyOaawtqftsjmvcW1LzVI5rrCGp+xyOa6wpqftcjmrMENb/nEc31BDW/7xHN9QU1f+ARzQ0ENW/ziOaGgpo/9IjmRoKaP/KI5saCmj/2iOZ9BDV/4hHN+wpq3i6ouSnq8UFzKqEWIY2QTsgg8DUhXyPxNQN7aPaU7LHYc/AazGsSn6P5nMVzmMc09zFrbkJo6orrWvAo+sLRhDGEsYRxhPGECYSJhEmEyYQphKmEaYTphBmEmYRZhNmEOYS5hHmE+QTe6573fue90HlvcN4rm/eO5r2UeW9h3muX957lvVh5b1Leq5P3ruS9HHlvQ97rj/e+473geG803iuM987ivaR4byXea4j33uG9aHhvFt6rhPfu4L0seG8H3uuAc/9zLnzODc+50jl3OOfS5tzSnGuZcw9zLl7OTcu5Wjl3Kefy5NyWnOuRcx9yLkDOjce54jh3GucS49xanGuKcy9xLiLOzcO5ajh3C+cy4dwenOuCcz9wLgTODcDvyvO74/wuNb9bzO/a8run/C4mv5vI7+rxu2v8Lhe/28Tv+vC7L/wuCL8bwe8K8LPz/Cw5P1vNzxrzs7f8LCo/m8nPKvKze/wsGz/bxc868bM//CwMPxvCz0rwswP8Wzr/tsy/tfJvj/xbHP82xb/V8G8XfC+f723zvV6+98n3AvneGN8r4nsnfC+Br635WpOvvfhahL05e1X2buxleG3ntY7P/Xwu5HMDzxXn+C9Vie9guE0BAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "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FeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXFeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXDeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXHeRXAfKrAPlVgPwqQH4VIL8KkF8FyK8C5FcB8qsA+VWA/CpAfhUgvwqQXwXIrwLkVwHyqwD5VYD8KkB+FSC/CpBfBcivAuRXAfKrAPlVgPwqQH4VIL8KkF8FyK8C5FcB8qsA+VWA/CpAfhUgvwqQXwXIrwLkVwHyqwD5VYD8KkB+FSC/CpBfBcivAuRXAfKrAPlVgPwqQH4VIL8KkF8FyK8C5FcB8qsA+VWA/CpAfhUgvwqQXwXIrwLkVwHyqwD5VYD8KkB+FSC/CpBfBcivAuRXAfKrAPlVgPwqQH4VIL8KkF8FyK8C5FcB8qsA+VWA/CpAfhUgvwqQXwXIrwLkVwHyqwD5VYD8KkB+FSC/CpBfBcivAuRXAfKrAPlVgPwqQH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH41QH51vECAdR7A7vB5ALvF5wHsHp8HsJt8HsDu8nkAu83nAew+nwewG30eQO80iLLOA+idBmHWeQC90yDOOg+gdxoEWucB9E6DSOs8gN5pEGqdB9A7DWKt8wB6p0GwdR5A7zSIts4D6J0G4dZ5AL3TIN46D6B3GgRc5wH0ToOI6zyA3mkQcp0H0DsNYq7zAHqnQdB1HkDvNIi6zgPonQZh13kAvdMg7joPoHcaBF7nAfROg8jrPIDeaRB6nQfQOw1ir/MAeqdB8HUeQO80iL7OA+idBuHXeQC90yD+Og+gdxoEYOcB9E6DCOw8gN5pEIKdB9A7DWKw8wB6p0EQdh5A7zSIws4D6J0GYdh5AL3TIA47D6B3GgRi5wH0ToNI7DyA3mkQip0H0DsNYrHzAHqnQTB2HkDv9H009rt/uqr4uZrfV56/7u37ar+6/Oj96+LXrx9s9buV28/Q863cfjqfb+X2c/98K7cn6vlWbs/q863c3gLPt3J7vzzfyu3N9Xwrt3fi060c9zn1863IbNvjPlt/vhWZbXv+nVunFZlte9x/h/F8KzLb9rj/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cuzVcuzVcuzVcuzVcuzVcuzVcuzVcuzVcuzVcuzVcuzVcuzVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+zVc+y15thrzbHXmmOvNcdea4691hx7rTn2WnPstebYa82x15pjrzXHXmuOvdYce6059lpz7LXm2GvNsdeaY681x15rjr3WHHutOfZac+y15thrzbHXmmOvNcdea4691hx7rTn2WnPstebYa82x15pjrzXHXmuOvdYce6059lpz7LXm2GvNsdeaY681x15rjr3WHHutOfZac+y15thrzbHXmmOvNcdea4691hx7rTn2WnPstebYa82x15pjrzXHXmuOvdYce6059lpz7LXm2GvNsdeaY681x15rjr3WHHutOfZac+y15thrzbHXmmOvNcdea4691hx7rTn2WnPstebYa82x15pjrzXHXmuOvdYce6059lpz7LXm2GvNsdeaY681x15rjr3WHHutOfZac+y15thrzbHXmmOvNcdeW469thx7bTn22nLsteXYa8ux15Zjry3HXluOvbYce2059tpy7LXl2GvLsdeWY68tx15bjr22HHttOfbacuy15dhry7HXlmOvLcdeW469thx7bTn22nLsteXYa8ux15Zjry3HXluOvbYce2059tpy7LXl2GvLsdeWY68tx15bjr22HHttOfbacuy15dhry7HXlmOvLcdeW469thx7bTn22nLsteXYa8ux15Zjry3HXluOvbYce2059tpy7LXl2GvLsdeWY68tx15bjr22HHttOfbacuy15dhry7HXlmOvLcdeW469thx7bTn22nLsteXYa8ux15Zjry3HXluO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",
      "",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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"
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n\n\ncontract zkPetitsChevaux {\n\n    use dep::aztec::{\n        hash::pedersen_hash,\n        selector::compute_selector,\n        context::{PrivateContext, PublicContext, Context},\n        types::type_serialization::{\n            TypeSerializationInterface,\n            field_serialization::{FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n        },\n        state_vars::{map::Map, public_state::PublicState, set::Set},\n        types::address::{AztecAddress},\n    };\n\n    // docs:end:storage_struct\n    use crate::types::{\n        game::{Game, GameSerializationMethods, GAME_SERIALIZED_LEN, serializeGame, deserializeGame},\n    };\n\n    // docs:start:storage_struct\n    struct Storage {\n        currentGame: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        currentPlayers: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        dices: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        game: PublicState<[Field;91], GAME_SERIALIZED_LEN>\n    }\n\n    // docs:start:storage_init\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                dices: PublicState::new(\n                    context,\n                    1,\n                    FieldSerializationMethods,\n                ),\n                currentGame: PublicState::new(\n                    context,\n                    2,\n                    FieldSerializationMethods,\n                ),\n                currentPlayers: PublicState::new(\n                    context,\n                    3,\n                    FieldSerializationMethods,\n                ),\n                game: PublicState::new(\n                    context,\n                    4,\n                    GameSerializationMethods,\n                )\n            }\n        }\n    }\n    // docs:end:storage_init\n\n    // docs:start:constructor\n    #[aztec(private)]\n    fn constructor(dicesAddress: Field) {\n        let selector = compute_selector(\"_constructor(Field)\");\n        context.call_public_function(context.this_address(), selector, [dicesAddress]);\n    }\n\n    // docs:end:constructor\n    #[aztec(public)]\n    internal fn _constructor(dicesAddress: Field) {\n        storage.dices.write(dicesAddress);\n        let mut game = Game {\n\t\t    players: [0; 4],\n\t\t    seedHashes: [0; 4],\n\t\t    board: [0; 56],\n\t\t    finish_lines: [0; 24],\n\t\t    turn: 0,\n\t\t    winner: 0,\n\t\t    last_move: 0,\n\t    };\n        storage.game.write(serializeGame(game));\n    }\n\n    #[aztec(private)]\n    fn register(dicesAddress: Field, seed: u96) {\n        let rollSelector = compute_selector(\"roll(u96,u96)\");\n        let _ = context.call_private_function(dicesAddress, rollSelector, [0, seed as Field]); \n        let seedHash = pedersen_hash([seed as Field], 10);\n\n        let selector = compute_selector(\"_register(Field,Field)\");\n        context.call_public_function(context.this_address(), selector, [context.msg_sender(), seedHash]); \n    }\n\n    #[aztec(public)]\n    internal fn _register(user: Field, seedHash: Field) {\n        let mut game: Game = deserializeGame(storage.game.read());\n        let mut registered = false;\n        for i in 0..4 {\n            if game.players[i] == 0 {\n                if registered == false {\n                game.players[i] = user;\n                game.seedHashes[i] = seedHash;\n                registered = true;\n                }\n            }\n        }\n        if game.players[3] != 0 {\n            game.last_move = context.timestamp();\n        }\n        storage.game.write(serializeGame(game));\n    }\n\n\n    // Below this point is the stuff of nightmares.\n    // This should ideally not be required. What do we do if vastly different types of serialized_notes?\n\n    // docs:start:compute_note_hash_and_nullifier\n    // Computes note hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(_: Field, _: Field, _: Field, _: [Field; 0]) -> [Field; 4] {\n        [0, 0, 0, 0]\n    }\n    // docs:end:compute_note_hash_and_nullifier\n}\n// docs:end:token_all\n",
        "path": "/home/mortimr/projects/ethglobal/turkish/zkgames/src/contracts/zkpticv/src/main.nr"
      },
      "35": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "41": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/aztec/context.nr"
      },
      "42": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/aztec/hash.nr"
      },
      "57": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "58": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/aztec/oracle/call_private_function.nr"
      },
      "65": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/aztec/oracle/enqueue_public_function_call.nr"
      },
      "68": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/aztec/oracle/storage.nr"
      },
      "70": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}",
        "path": "/aztec/private_call_stack_item.nr"
      },
      "71": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/aztec/public_call_stack_item.nr"
      },
      "76": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "99": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\nstruct Game {\n    players: [Field; 4],\n    seedHashes: [Field; 4],\n    board: [Field; 56],\n    finish_lines: [Field; 24],\n    turn: Field,\n    winner: Field,\n\tlast_move: Field,\n}\n\nglobal GAME_SERIALIZED_LEN: Field = 91;\n\nfn deserializeArr(raw: [Field; GAME_SERIALIZED_LEN]) -> [Field; GAME_SERIALIZED_LEN] {\n\traw\n}\n\nfn serializeArr(value: [Field; GAME_SERIALIZED_LEN]) -> [Field; GAME_SERIALIZED_LEN] {\n\tvalue\n}\n\nfn deserializeGame(raw: [Field; GAME_SERIALIZED_LEN]) -> Game {\n    let mut game = Game {\n\t\tplayers: [0; 4],\n\t\tseedHashes: [0; 4],\n\t\tboard: [0; 56],\n\t\tfinish_lines: [0; 24],\n\t\tturn: 0,\n\t\twinner: 0,\n\t\tlast_move: 0,\n\t};\n    game.players[0] = raw[0];\n    game.players[1] = raw[1];\n    game.players[2] = raw[2];\n    game.players[3] = raw[3];\n    game.seedHashes[0] = raw[4];\n    game.seedHashes[1] = raw[5];\n    game.seedHashes[2] = raw[6];\n    game.seedHashes[3] = raw[7];\n\n    for i in 0..56 {\n        game.board[i] = raw[8+i];\n    }\n    for i in 0..24 {\n        game.finish_lines[i] = raw[64+i];\n    }\n    game.turn = raw[88];\n    game.winner = raw[89];\n\tgame.last_move = raw[90];\n    game\n}\n\nfn serializeGame(value: Game) -> [Field; GAME_SERIALIZED_LEN] {\n\tlet mut res: [Field; GAME_SERIALIZED_LEN] = [0; GAME_SERIALIZED_LEN];\n\tres[0] = value.players[0];\n\tres[1] = value.players[1];\n\tres[2] = value.players[2];\n\tres[3] = value.players[3];\n\tres[4] = value.seedHashes[0];\n\tres[5] = value.seedHashes[1];\n\tres[6] = value.seedHashes[2];\n\tres[7] = value.seedHashes[3];\n\tfor i in 0..56 {\n\t\tres[8+i] = value.board[i];\n\t}\n\tfor i in 0..24 {\n\t\tres[64+i] = value.finish_lines[i];\n\t}\n\tres[88] = value.turn;\n\tres[89] = value.winner;\n\tres[90] = value.last_move;\n\tres\n}\n\nglobal GameSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeArr,\n    serialize: serializeArr,\n};",
        "path": "/home/mortimr/projects/ethglobal/turkish/zkgames/src/contracts/zkpticv/src/types/game.nr"
      }
    }
  },
  "aztecNrVersion": "aztec-packages-v0.15.0"
}